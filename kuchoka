require './lib/k2_connect_ruby_api_gem.rb'
client = K2ConnectRubyApiGem::Client.new("your access token").parse_it()
data = ["5c62451a809ad341a8bbcf6cd2b0e7d8efb9cd9ddf1765f5a1205a28edfde0d9"]
set = data.to_s.gsub(/[()]/, "")
set = JSON.parse(data.to_s).join(', ')
client = K2ConnectRubyApiGem::Client.new("your access token").authorize_it("h", set)

client.parse_it()

title=Mozart created_by=Voila

http://localhost:3002/todos

/home/k2-engineering-03/RubymineProjects/k2_exported_JSON.json

1st level keys
 info, item
2nd level keys within 'item'

    # Test Yajl
    # test = Yajl::Parser.parse(request.headers.env.select{|k, _| k =~ /^HTTP_/}.to_json)
    # puts(test["HTTP_X_KOPOKOPO_SIGNATURE"])
    # test = Yajl::Parser.parse(request.body.string)
    # puts(test["event"]["resource"][""])
# test = Yajl::Parser.parse(request.body.string.as_json)
    # puts(test.dig("topic"))
# puts("\n\nThe Secure Compare:\t#{ActiveSupport::SecurityUtils.secure_compare(hmac, signature)}\nThe To Eql:\t#{hmac.to_s.eql?(signature)}")
# @hash_body = Yajl::Parser.parse(the_request.body.string.to_json)
# puts("\nTopic:\t#{the_req_body["topic"]}\nReference:\t#{JSON.parse(the_req_body.deep_select("reference").to_s).join(', ')}\nMSISDN:\t#{JSON.parse(the_req_body.deep_select("sender_msisdn").to_s).join(', ')}\nAmount:\t#{JSON.parse(the_req_body.deep_select("amount").to_s).join(', ')}\nCurrency:\t#{JSON.parse(the_req_body.deep_select("currency").to_s).join(', ')}\nTill Number:\t#{JSON.parse(the_req_body.deep_select("till_number").to_s).join(', ')}\nSystem:\t#{JSON.parse(the_req_body.deep_select("system").to_s).join(', ')}\nSender First Name:\t#{JSON.parse(the_req_body.deep_select("sender_first_name").to_s).join(', ')}\nSender Middle Name:\t#{JSON.parse(the_req_body.deep_select("sender_middle_name").to_s).join(', ')}\nSender Last Name:\t#{JSON.parse(the_req_body.deep_select("sender_last_name").to_s).join(', ')}\n")

# if k2_truth_value
    #   k2_components = K2ConnectRuby::K2SplitRequest.new
    #   k2_components.request_body_components(k2_test.hash_body)
    #   puts("\nCheck")
    # else
    #   puts("\nNot Check")
    # end
# if truth_value
    #   k2_components = K2ConnectRuby::K2SplitRequest.request_body_components(k2_test.hash_body)
    #   puts(k2_components.topic)
    #   return 200
    # else
    #   return 401
    # end


	# Method for the Basic Get request. Not Necessary
    # def get_request
    #   k2_url = URI("https://a54fac07-5ac2-4ee2-8fcb-e3d5ac3ba8b1.mock.pstmn.io/")
    #   k2_https = Net::HTTP.new(k2_url.host, k2_url.port)
    #   k2_https.use_ssl =true
    #   k2_https_response = k2_https.get URI(k2_url)
    #   puts(k2_https_response.body.to_s)
    # rescue Exception => e
    #   puts(e.message)
    # end

# Method for webhook subscribing for buygood_transaction_received
    # def received_webhook_subscribe(access_token)
    #   # valid_access_token(access_token) and return
    #   k2_url = URI.parse("https://a54fac07-5ac2-4ee2-8fcb-e3d5ac3ba8b1.mock.pstmn.io/webhook-subscription")
    #   k2_https = Net::HTTP.new(k2_url.host, k2_url.port)
    #   k2_https.use_ssl =true
    #   k2_https.verify_mode =OpenSSL::SSL::VERIFY_NONE
    #   k2_request =Net::HTTP::Post.new(k2_url)
    #   k2_request.add_field("Content-Type", "application/json")
    #   k2_request.add_field("Accept", "application/json")
    #   k2_request.add_field("Authorization", "Bearer #{access_token}")
    #   k2_request.body = {
    #       "event_type": "buygooods_transaction_received",
    #       "url": "https://myapplication.com/webhooks",
    #       "secret": "webhook_secret"
    #   }.to_json
    #   k2_response = k2_https.request(k2_request)
    #   puts("\nThe Response:\t#{k2_response.body.to_s}")
    # rescue Exception => e
    #   puts(e.message)
    # end

    # Method for webhook subscribing for buygood_transaction_reversed
    # def reversals_webhook_subscribe(access_token)
    #   # valid_access_token(access_token) and return
    #   k2_url = URI.parse("https://a54fac07-5ac2-4ee2-8fcb-e3d5ac3ba8b1.mock.pstmn.io/buygoods-transaction-reversed")
    #   k2_https = Net::HTTP.new(k2_url.host, k2_url.port)
    #   k2_https.use_ssl =true
    #   k2_https.verify_mode =OpenSSL::SSL::VERIFY_NONE

    #   k2_request =Net::HTTP::Post.new(k2_url)
    #   k2_request.add_field("Content-Type", "application/json")
    #   k2_request.add_field("Accept", "application/json")
    #   k2_request.add_field("Authorization", "Bearer #{access_token}")
    #   k2_request.body = {
    #       "event_type": "buygooods_transaction_reversed",
    #       "url": "https://myapplication.com/webhooks",
    #       "secret": "webhook_secret"
    #   }.to_json
    #   k2_response = k2_https.request(k2_request)
    #   puts("\nThe Response:\t#{k2_response.body.to_s}")
    # rescue Exception => e
    #   puts(e.message)
    # end

# @token_lifecycle_end = Time.now
          # unless token_lifecycle(@token_lifecycle_start, @token_lifecycle_end)
          #   STDERR.puts("Expired Access Token.")
          #   exit(false)
          # end
def nil_request x, y, z
      raise ArgumentError.new "Nil Request Body Argument!" if x.nil?
      raise ArgumentError.new "Nil Secret Key Argument!" if y.nil?
      raise ArgumentError.new "Nil Signature Argument!" if z.nil?
    end
def nil_request x
      raise ArgumentError.new "Nil Request Parameter Input!" if x.nil?
    end
# # GET /todos
  # def index
  #   @todos = Todo.all
  #   json_response(@todos)
  # end
  #
  # # POST /todos
  # def create
  #   @todo = Todo.create!(todo_params)
  #   json_response(@todo, :created)
  # end
  #
  # # GET /todos/:id
  # def show
  #   json_response(@todo)
  # end
  #
  # # PUT /todos/:id
  # def update
  #   @todo.update(todo_params)
  #   head :no_content
  # end
  #
  # # DELETE /todos/:id
  # def destroy
  #   @todo.destroy
  #   head :no_content
  # end
  #
  # private
  #
  # def todo_params
  #   # whitelist params
  #   params.permit(:title, :created_by)
  # end
  #
  # def set_todo
  #   @todo = Todo.find(params[:id])
  # end
