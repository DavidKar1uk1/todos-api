require './lib/k2_connect_ruby_api_gem.rb'
client = K2ConnectRubyApiGem::Client.new("your access token").parse_it()
data = ["5c62451a809ad341a8bbcf6cd2b0e7d8efb9cd9ddf1765f5a1205a28edfde0d9"]
set = data.to_s.gsub(/[()]/, "")
set = JSON.parse(data.to_s).join(', ')
client = K2ConnectRubyApiGem::Client.new("your access token").authorize_it("h", set)

client.parse_it()

title=Mozart created_by=Voila

http://localhost:3002/todos

/home/k2-engineering-03/RubymineProjects/k2_exported_JSON.json

1st level keys
 info, item
2nd level keys within 'item'

    # Test Yajl
    # test = Yajl::Parser.parse(request.headers.env.select{|k, _| k =~ /^HTTP_/}.to_json)
    # puts(test["HTTP_X_KOPOKOPO_SIGNATURE"])
    # test = Yajl::Parser.parse(request.body.string)
    # puts(test["event"]["resource"][""])
# test = Yajl::Parser.parse(request.body.string.as_json)
    # puts(test.dig("topic"))
# puts("\n\nThe Secure Compare:\t#{ActiveSupport::SecurityUtils.secure_compare(hmac, signature)}\nThe To Eql:\t#{hmac.to_s.eql?(signature)}")
# @hash_body = Yajl::Parser.parse(the_request.body.string.to_json)
# puts("\nTopic:\t#{the_req_body["topic"]}\nReference:\t#{JSON.parse(the_req_body.deep_select("reference").to_s).join(', ')}\nMSISDN:\t#{JSON.parse(the_req_body.deep_select("sender_msisdn").to_s).join(', ')}\nAmount:\t#{JSON.parse(the_req_body.deep_select("amount").to_s).join(', ')}\nCurrency:\t#{JSON.parse(the_req_body.deep_select("currency").to_s).join(', ')}\nTill Number:\t#{JSON.parse(the_req_body.deep_select("till_number").to_s).join(', ')}\nSystem:\t#{JSON.parse(the_req_body.deep_select("system").to_s).join(', ')}\nSender First Name:\t#{JSON.parse(the_req_body.deep_select("sender_first_name").to_s).join(', ')}\nSender Middle Name:\t#{JSON.parse(the_req_body.deep_select("sender_middle_name").to_s).join(', ')}\nSender Last Name:\t#{JSON.parse(the_req_body.deep_select("sender_last_name").to_s).join(', ')}\n")

# if k2_truth_value
    #   k2_components = K2ConnectRuby::K2SplitRequest.new
    #   k2_components.request_body_components(k2_test.hash_body)
    #   puts("\nCheck")
    # else
    #   puts("\nNot Check")
    # end
# if truth_value
    #   k2_components = K2ConnectRuby::K2SplitRequest.request_body_components(k2_test.hash_body)
    #   puts(k2_components.topic)
    #   return 200
    # else
    #   return 401
    # end


	
